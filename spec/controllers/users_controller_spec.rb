require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:admin) }

  let(:invalid_attributes) {{ name: nil }}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  shared_examples 'http verbs test' do
    before do
      @user = controller.current_user
    end
    describe 'GET #index' do
      it 'returns a success response' do
        @user
        get :index
        expect(response).to be_success
      end
    end

    describe 'GET #show' do
      it 'returns a success response' do
        @user
        get :show, params: { id: @user.to_param }
        expect(response).to be_success
      end
    end

    describe 'GET #new' do
      it 'returns a success response' do
        get :new
        expect(response).to be_success
      end
    end

    describe 'GET #edit' do
      it 'returns a success response' do
        @user
        get :edit, params: { id: @user.to_param }
        expect(response).to be_success
      end
    end

    describe 'POST #create' do
      context 'with valid params' do
        it 'creates a new user' do
          expect do
            post :create, params: { user: valid_attributes }
          end.to change(User, :count).by(1)
        end
        it 'redirects to the created user' do
          post :create, params: { user: valid_attributes }
          expect(response).to redirect_to(User.last)
        end
      end

      context 'with invalid params' do
        it 'returns a success response' do
          post :create, params: { user: invalid_attributes }
          expect(response).to be_success
        end
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        it 'updates the requested user' do
          @user
          put :update, params: { id: @user.to_param, user: valid_attributes }
          @user.reload
        end
        it 'redirects to the user' do
          @user
          put :update, params: { id: @user.to_param, user: valid_attributes }
          expect(response).to redirect_to(@user)
        end
      end

      context'with invalid params' do
        it 'returns a success response' do
          @user
          put :update, params: { id: @user.to_param, user: invalid_attributes }
          expect(response).to be_success
        end
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested user' do
        @user
        expect do
          delete :destroy, params: { id: @user.to_param }
        end.to change(User, :count).by(-1)
      end
      it 'redirects to the users list' do
        @user
        delete :destroy, params: { id: @user.to_param }
        expect(response).to redirect_to(users_url)
      end
    end
  end

  context 'with user admin' do
    # be login to execute test
    login_admin
    it_behaves_like 'http verbs test'
  end

  context 'with user boss' do
    login_boss
    it_behaves_like 'http verbs test'
  end

  context 'with user teamleader' do
    login_teamleader
    it_behaves_like 'http verbs test'
  end

  context 'with user employee' do
    login_employee
    it_behaves_like 'http verbs test'
  end
end
